1. What is Emmet?

Ans- Emmet is a powerful and time-saving toolkit for web developers and front-end designers. It is a plugin that can be used in various code editors and integrated development environments (IDEs), including Visual Studio Code (VS Code). Emmet helps developers write HTML and CSS code quickly and efficiently by providing shorthand abbreviations and shortcuts for generating code snippets.

2. Differenct between a Library and Framework?

Ans- Library: You use a library to perform specific tasks within your application, and you have control over when and how you use it. Libraries are more flexible but require you to make more decisions about the overall architecture of your application.Library is like a collection of tools you can pick and choose from to help with specific tasks in your project. You decide when and how to use these tools.
Framework: A framework provides a higher level of structure and dictates the overall flow and architecture of your application. You plug your code into the framework, and it controls the execution flow. Frameworks are more opinionated but can help streamline development by providing conventions and best practices.Framework is like a blueprint or a set of instructions that guides you on how to build your entire project. You follow the framework's rules and structure to create your application.

3. What is CDN ? Why do we use it?

Ans- A Content Delivery Network (CDN) is a network of geographically distributed servers that work together to deliver web content and other internet resources, such as HTML pages, CSS files, JavaScript files, images, videos, and more, to users more efficiently and quickly. The primary purpose of using a CDN is to improve the performance, speed, and availability of web content while reducing the load on the origin server.
Here are the key reasons why CDNs are used: Faster Content Delivery, Reduced Latency: By serving content from servers located closer to the user, CDNs minimize network latency, High Availability and Redundancy, Traffic Offloading, Bandwidth Savings, Improved Security: Some CDNs offer security features such as DDoS (Distributed Denial of Service) protection and web application firewalls. 

4. Why is React called ‘React’?

Ans- React is a JavaScript library for building user interfaces, that was developed by Facebook. It was originally released in 2013 and has since become one of the most popular libraries for building web applications.
React is a JavaScript library for building user interfaces. It was developed by Facebook, and the name “React” was chosen because it is meant to help developers build user interfaces that are fast and responsive, or “reactive.” The library was designed to “react” to changes in data.
When data in a React application changes, the components that depend on that data are automatically updated, which allows for efficient and seamless updates to the user interface. The name “React” reflects this reactive nature of the library.

5. What is cross-origin in the script tag?

Ans- The crossorigin attribute sets the mode of the request to an HTTP CORS Request. Web pages often make requests to load resources on other servers. Here is where CORS comes in. A cross-origin request is a request for a resource (e.g. style sheets, iframes, images, fonts, or scripts) from another domain.
CORS stands for Cross-Origin Resource Sharing,and is a mechanism that allows resources on a web page to be requested from another domain outside their own domain. It defines a way of how a browser and server can interact to determine whether it is safe to allow the cross-origin request. CORS allows servers to specify who can access the assets on the server, among many other things.
Tip: The opposite of cross-origin requests is same-origin requests. This means that a web page can only interact with other documents that are also on the same server. 

6. What is DOM?

Ans-  The DOM is a way to interact with and manipulate the structure and content of a web page using JavaScript. It allows you to access, modify, and respond to elements on the page, making web applications dynamic and interactive.
Examples are - Using JavaScript and the DOM, you can: Access Elements:You can access HTML elements like headings ->
const heading = document.querySelector('h1');,Modify Content: You can change the content of these elements dynamically:
-> heading.textContent = 'New Title';,Modify Content: You can change the content of these elements dynamically: -> heading.textContent = 'New Title';.

7. What is the difference React and ReactDOM?

Ans- React and ReactDOM are two closely related libraries in the React ecosystem.
React:
React is a JavaScript library for building user interfaces.referred to as the "React components."
React allows you to create reusable UI components that can be composed together to build complex user interfaces.
It introduces a virtual DOM to efficiently update the real DOM when there are changes in the component's state or props, reducing unnecessary re-renders,improving performance.
React can be used not only for web applications but also for building mobile applications using React Native.

ReactDOM:
ReactDOM is a specific package within the React ecosystem that focuses on the integration of React with the DOM.
ReactDOM includes methods like ReactDOM.render() for rendering React components into a specified DOM element, and it handles updates and re-renders efficiently using the virtual DOM, ReactDOM is specifically designed for web applications.

8. What is difference between react.development.js and react.production.js files via CDN?

Ans- react.development.js:
This file is meant for development environments.
It includes additional development-specific warnings, error messages, and helpful console messages. These messages are designed to aid developers during development and debugging.
It is larger in size compared to the production version because of the additional development-related code and debugging information.
Using this version in a production environment is not recommended due to its larger file size and the potential for exposing debugging information to end-users.

react.production.js:
This file is intended for production environments.
It is optimized for performance and has a smaller file size compared to the development version.
It omits development-specific warnings, error messages, and debugging information. This can result in better performance and a smaller bundle size for your application when deployed.
Using this version in a production environment is recommended to ensure a faster and more efficient application.

9. What are async and defer?

Ans- async and defer are two attributes that can be added to the `<script>` tag when including external JavaScript files in an HTML document. 
In the normal case, when you include a script without any attributes, HTML code begins parsing. When it encounters the script tag, HTML parsing temporarily halts, and the browser starts downloading the script from the network. Once the script is downloaded, its execution begins. After the script execution completes, HTML parsing resumes from where it left off.
Example:
<script src=" " ></script>

For the async attribute:
When you include a script with the async attribute, HTML parsing continues without interruption. Simultaneously, the browser initiates the download of the script from the network. The script is executed as soon as it's downloaded, potentially before HTML parsing is complete. Once script execution finishes, HTML parsing continues.
This is beneficial for scripts that don't depend on the DOM structure or other scripts and can run independently.
Example:
<script src="example.js" async></script>

For the defer attribute:
When you include a script with the defer attribute, the browser starts downloading the script immediately, but it defers script execution until after HTML parsing is complete. Scripts with defer are executed in the order they appear in the HTML document, just before the DOMContentLoaded event is triggered.
This is useful when you want to ensure that your scripts have access to the fully parsed DOM, making it suitable for scripts that interact with the DOM or rely on other scripts.
Example:
<script src="example.js" defer></script>
